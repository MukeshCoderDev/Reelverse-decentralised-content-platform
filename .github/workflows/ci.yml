name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: reelverse_db
          POSTGRES_USER: reelverse
          POSTGRES_PASSWORD: reelverse_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            api/package-lock.json
      - name: Install root dependencies
        run: npm ci
      - name: Install API dependencies
        run: npm ci
        working-directory: ./api
      - name: Wait for Postgres
        run: |
          while ! pg_isready -h localhost -p 5432 -U reelverse; do
            echo "Waiting for Postgres..."
            sleep 2
          done
      - name: Run API migrations
        run: npm run migrate
        working-directory: ./api
      - name: Run API tests
        run: npm run test:api
        working-directory: ./api

  contracts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json
      - name: Install Contracts dependencies
        run: npm ci
        working-directory: ./contracts
      - name: Compile Contracts
        run: npm run compile
        working-directory: ./contracts
      - name: Run Contracts tests
        run: npm run test
        working-directory: ./contracts

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install root dependencies
        run: npm ci
      - name: Typecheck Frontend
        run: npm run typecheck
      - name: Lint Frontend
        run: npm run lint
      - name: Build Frontend
        run: npm run build

  e2e:
    runs-on: ubuntu-latest
    needs: [api, contracts, frontend] # Ensure API, Contracts, and Frontend are built and tested
    if: github.ref == 'refs/heads/main' && secrets.BUNDLER_URL != '' && secrets.ENTRY_POINT_ADDRESS != '' && secrets.DEV_OWNER_PRIVATE_KEY != ''
    env:
      E2E_SEPOLIA: 1
      BUNDLER_URL: ${{ secrets.BUNDLER_URL }}
      ENTRY_POINT_ADDRESS: ${{ secrets.ENTRY_POINT_ADDRESS }}
      DEV_OWNER_PRIVATE_KEY: ${{ secrets.DEV_OWNER_PRIVATE_KEY }}
      RPC_URL: ${{ secrets.RPC_URL }}
      PAYMASTER_URL: ${{ secrets.PAYMASTER_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            api/package-lock.json
      - name: Install root dependencies
        run: npm ci
      - name: Install API dependencies
        run: npm ci
        working-directory: ./api
      - name: Run E2E tests
        run: npm run e2e:api
        working-directory: ./api
    # Required GitHub Secrets for E2E tests:
    # BUNDLER_URL: URL of the bundler service (e.g., Biconomy, Alchemy)
    # ENTRY_POINT_ADDRESS: Address of the EntryPoint contract
    # DEV_OWNER_PRIVATE_KEY: Private key of the E2E test owner account (DO NOT USE IN PRODUCTION)
    # RPC_URL: RPC URL for the Sepolia network
    # PAYMASTER_URL: URL of the paymaster service (e.g., Biconomy, Alchemy)