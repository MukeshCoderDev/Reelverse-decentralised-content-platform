/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IContentRegistryV2,
  IContentRegistryV2Interface,
} from "../../../contracts/interfaces/IContentRegistryV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contentId",
        type: "uint256",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contentId",
        type: "uint256",
      },
    ],
    name: "getContent",
    outputs: [
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "address",
        name: "splitter",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "priceUsdCents",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "geoMask",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "metaHash",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "status",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IContentRegistryV2__factory {
  static readonly abi = _abi;
  static createInterface(): IContentRegistryV2Interface {
    return new Interface(_abi) as IContentRegistryV2Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IContentRegistryV2 {
    return new Contract(address, _abi, runner) as unknown as IContentRegistryV2;
  }
}
