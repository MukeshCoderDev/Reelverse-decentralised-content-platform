/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IContentRegistryV2Interface extends Interface {
  getFunction(nameOrSignature: "exists" | "getContent"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContent",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
}

export interface IContentRegistryV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IContentRegistryV2;
  waitForDeployment(): Promise<this>;

  interface: IContentRegistryV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  exists: TypedContractMethod<[contentId: BigNumberish], [boolean], "view">;

  getContent: TypedContractMethod<
    [contentId: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint] & {
        creator: string;
        splitter: string;
        priceUsdCents: bigint;
        geoMask: bigint;
        metaHash: string;
        status: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[contentId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getContent"
  ): TypedContractMethod<
    [contentId: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint] & {
        creator: string;
        splitter: string;
        priceUsdCents: bigint;
        geoMask: bigint;
        metaHash: string;
        status: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
