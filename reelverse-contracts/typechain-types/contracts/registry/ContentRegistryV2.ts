/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ContentRegistryV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MODERATOR_ROLE"
      | "PUBLISHER_ROLE"
      | "exists"
      | "getContent"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "pause"
      | "paused"
      | "recordSale"
      | "registerContent"
      | "renounceRole"
      | "revokeRole"
      | "setGeoMask"
      | "setMetaHash"
      | "setModerationStatus"
      | "setPrice"
      | "setSplitter"
      | "supportsInterface"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContentRegistered"
      | "ContentSale"
      | "ContentUpdated"
      | "ModerationUpdated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MODERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLISHER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordSale",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContent",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGeoMask",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaHash",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setModerationStatus",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSplitter",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLISHER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recordSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGeoMask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetaHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setModerationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace ContentRegisteredEvent {
  export type InputTuple = [
    contentId: BigNumberish,
    creator: AddressLike,
    splitter: AddressLike,
    priceUsdCents: BigNumberish,
    geoMask: BigNumberish,
    metaHash: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    contentId: bigint,
    creator: string,
    splitter: string,
    priceUsdCents: bigint,
    geoMask: bigint,
    metaHash: string,
    status: bigint
  ];
  export interface OutputObject {
    contentId: bigint;
    creator: string;
    splitter: string;
    priceUsdCents: bigint;
    geoMask: bigint;
    metaHash: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContentSaleEvent {
  export type InputTuple = [
    contentId: BigNumberish,
    buyer: AddressLike,
    priceUsdCents: BigNumberish,
    txRef: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    contentId: bigint,
    buyer: string,
    priceUsdCents: bigint,
    txRef: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    contentId: bigint;
    buyer: string;
    priceUsdCents: bigint;
    txRef: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContentUpdatedEvent {
  export type InputTuple = [
    contentId: BigNumberish,
    priceUsdCents: BigNumberish,
    geoMask: BigNumberish,
    metaHash: BytesLike
  ];
  export type OutputTuple = [
    contentId: bigint,
    priceUsdCents: bigint,
    geoMask: bigint,
    metaHash: string
  ];
  export interface OutputObject {
    contentId: bigint;
    priceUsdCents: bigint;
    geoMask: bigint;
    metaHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModerationUpdatedEvent {
  export type InputTuple = [
    contentId: BigNumberish,
    oldStatus: BigNumberish,
    newStatus: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    contentId: bigint,
    oldStatus: bigint,
    newStatus: bigint,
    reason: string
  ];
  export interface OutputObject {
    contentId: bigint;
    oldStatus: bigint;
    newStatus: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ContentRegistryV2 extends BaseContract {
  connect(runner?: ContractRunner | null): ContentRegistryV2;
  waitForDeployment(): Promise<this>;

  interface: ContentRegistryV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MODERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PUBLISHER_ROLE: TypedContractMethod<[], [string], "view">;

  exists: TypedContractMethod<[contentId: BigNumberish], [boolean], "view">;

  getContent: TypedContractMethod<
    [contentId: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint] & {
        creator: string;
        splitter: string;
        priceUsdCents: bigint;
        geoMask: bigint;
        metaHash: string;
        status: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  recordSale: TypedContractMethod<
    [
      contentId: BigNumberish,
      buyer: AddressLike,
      priceUsdCents: BigNumberish,
      txRef: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  registerContent: TypedContractMethod<
    [
      contentId: BigNumberish,
      creator: AddressLike,
      splitter: AddressLike,
      priceUsdCents: BigNumberish,
      geoMask: BigNumberish,
      metaHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setGeoMask: TypedContractMethod<
    [contentId: BigNumberish, geoMask: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMetaHash: TypedContractMethod<
    [contentId: BigNumberish, metaHash: BytesLike],
    [void],
    "nonpayable"
  >;

  setModerationStatus: TypedContractMethod<
    [contentId: BigNumberish, newStatus: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  setPrice: TypedContractMethod<
    [contentId: BigNumberish, priceUsdCents: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSplitter: TypedContractMethod<
    [contentId: BigNumberish, splitter: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MODERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PUBLISHER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[contentId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getContent"
  ): TypedContractMethod<
    [contentId: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint] & {
        creator: string;
        splitter: string;
        priceUsdCents: bigint;
        geoMask: bigint;
        metaHash: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "recordSale"
  ): TypedContractMethod<
    [
      contentId: BigNumberish,
      buyer: AddressLike,
      priceUsdCents: BigNumberish,
      txRef: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerContent"
  ): TypedContractMethod<
    [
      contentId: BigNumberish,
      creator: AddressLike,
      splitter: AddressLike,
      priceUsdCents: BigNumberish,
      geoMask: BigNumberish,
      metaHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGeoMask"
  ): TypedContractMethod<
    [contentId: BigNumberish, geoMask: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMetaHash"
  ): TypedContractMethod<
    [contentId: BigNumberish, metaHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setModerationStatus"
  ): TypedContractMethod<
    [contentId: BigNumberish, newStatus: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPrice"
  ): TypedContractMethod<
    [contentId: BigNumberish, priceUsdCents: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSplitter"
  ): TypedContractMethod<
    [contentId: BigNumberish, splitter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ContentRegistered"
  ): TypedContractEvent<
    ContentRegisteredEvent.InputTuple,
    ContentRegisteredEvent.OutputTuple,
    ContentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ContentSale"
  ): TypedContractEvent<
    ContentSaleEvent.InputTuple,
    ContentSaleEvent.OutputTuple,
    ContentSaleEvent.OutputObject
  >;
  getEvent(
    key: "ContentUpdated"
  ): TypedContractEvent<
    ContentUpdatedEvent.InputTuple,
    ContentUpdatedEvent.OutputTuple,
    ContentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ModerationUpdated"
  ): TypedContractEvent<
    ModerationUpdatedEvent.InputTuple,
    ModerationUpdatedEvent.OutputTuple,
    ModerationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ContentRegistered(uint256,address,address,uint64,uint32,bytes32,uint8)": TypedContractEvent<
      ContentRegisteredEvent.InputTuple,
      ContentRegisteredEvent.OutputTuple,
      ContentRegisteredEvent.OutputObject
    >;
    ContentRegistered: TypedContractEvent<
      ContentRegisteredEvent.InputTuple,
      ContentRegisteredEvent.OutputTuple,
      ContentRegisteredEvent.OutputObject
    >;

    "ContentSale(uint256,address,uint64,bytes32,uint256)": TypedContractEvent<
      ContentSaleEvent.InputTuple,
      ContentSaleEvent.OutputTuple,
      ContentSaleEvent.OutputObject
    >;
    ContentSale: TypedContractEvent<
      ContentSaleEvent.InputTuple,
      ContentSaleEvent.OutputTuple,
      ContentSaleEvent.OutputObject
    >;

    "ContentUpdated(uint256,uint64,uint32,bytes32)": TypedContractEvent<
      ContentUpdatedEvent.InputTuple,
      ContentUpdatedEvent.OutputTuple,
      ContentUpdatedEvent.OutputObject
    >;
    ContentUpdated: TypedContractEvent<
      ContentUpdatedEvent.InputTuple,
      ContentUpdatedEvent.OutputTuple,
      ContentUpdatedEvent.OutputObject
    >;

    "ModerationUpdated(uint256,uint8,uint8,string)": TypedContractEvent<
      ModerationUpdatedEvent.InputTuple,
      ModerationUpdatedEvent.OutputTuple,
      ModerationUpdatedEvent.OutputObject
    >;
    ModerationUpdated: TypedContractEvent<
      ModerationUpdatedEvent.InputTuple,
      ModerationUpdatedEvent.OutputTuple,
      ModerationUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
