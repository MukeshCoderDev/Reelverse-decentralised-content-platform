/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PaymentSplitterCloneInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_BPS"
      | "bpsOf"
      | "depositUSDC"
      | "factory"
      | "init"
      | "payees"
      | "pending"
      | "release(address)"
      | "release(address,address)"
      | "released"
      | "sweepWrongToken"
      | "totalReceived"
      | "totalReleased"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "PaymentReceived"
      | "PaymentReleased"
      | "SweptWrongToken"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_BPS", values?: undefined): string;
  encodeFunctionData(functionFragment: "bpsOf", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "depositUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [AddressLike[], BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "payees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pending",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "release(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "release(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "released",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepWrongToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReceived",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReleased",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_BPS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bpsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pending", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "release(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "release(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepWrongToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReleased",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [
    factory: AddressLike,
    payees: AddressLike[],
    bps: BigNumberish[]
  ];
  export type OutputTuple = [factory: string, payees: string[], bps: bigint[]];
  export interface OutputObject {
    factory: string;
    payees: string[];
    bps: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReceivedEvent {
  export type InputTuple = [
    from: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, token: string, amount: bigint];
  export interface OutputObject {
    from: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReleasedEvent {
  export type InputTuple = [
    token: AddressLike,
    payee: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, payee: string, amount: bigint];
  export interface OutputObject {
    token: string;
    payee: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SweptWrongTokenEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentSplitterClone extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentSplitterClone;
  waitForDeployment(): Promise<this>;

  interface: PaymentSplitterCloneInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BPS: TypedContractMethod<[], [bigint], "view">;

  bpsOf: TypedContractMethod<[payee: AddressLike], [bigint], "view">;

  depositUSDC: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  init: TypedContractMethod<
    [payees_: AddressLike[], bps_: BigNumberish[], factory_: AddressLike],
    [void],
    "nonpayable"
  >;

  payees: TypedContractMethod<[], [string[]], "view">;

  pending: TypedContractMethod<
    [token: AddressLike, payee: AddressLike],
    [bigint],
    "view"
  >;

  "release(address)": TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  "release(address,address)": TypedContractMethod<
    [token: AddressLike, payee: AddressLike],
    [void],
    "nonpayable"
  >;

  released: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  sweepWrongToken: TypedContractMethod<
    [token: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  totalReceived: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  totalReleased: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bpsOf"
  ): TypedContractMethod<[payee: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositUSDC"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [payees_: AddressLike[], bps_: BigNumberish[], factory_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payees"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "pending"
  ): TypedContractMethod<
    [token: AddressLike, payee: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "release(address)"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "release(address,address)"
  ): TypedContractMethod<
    [token: AddressLike, payee: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "released"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "sweepWrongToken"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalReceived"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalReleased"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReceived"
  ): TypedContractEvent<
    PaymentReceivedEvent.InputTuple,
    PaymentReceivedEvent.OutputTuple,
    PaymentReceivedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReleased"
  ): TypedContractEvent<
    PaymentReleasedEvent.InputTuple,
    PaymentReleasedEvent.OutputTuple,
    PaymentReleasedEvent.OutputObject
  >;
  getEvent(
    key: "SweptWrongToken"
  ): TypedContractEvent<
    SweptWrongTokenEvent.InputTuple,
    SweptWrongTokenEvent.OutputTuple,
    SweptWrongTokenEvent.OutputObject
  >;

  filters: {
    "Initialized(address,address[],uint32[])": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PaymentReceived(address,address,uint256)": TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;
    PaymentReceived: TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;

    "PaymentReleased(address,address,uint256)": TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;
    PaymentReleased: TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;

    "SweptWrongToken(address,address,uint256)": TypedContractEvent<
      SweptWrongTokenEvent.InputTuple,
      SweptWrongTokenEvent.OutputTuple,
      SweptWrongTokenEvent.OutputObject
    >;
    SweptWrongToken: TypedContractEvent<
      SweptWrongTokenEvent.InputTuple,
      SweptWrongTokenEvent.OutputTuple,
      SweptWrongTokenEvent.OutputObject
    >;
  };
}
