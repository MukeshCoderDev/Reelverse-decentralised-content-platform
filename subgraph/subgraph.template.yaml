specVersion: 0.0.5
schema:
  file: ./schema.graphql
dataSources:
  # Creator Registry Contract
  - kind: ethereum
    name: CreatorRegistry
    network: {{network}}
    source:
      address: "{{creatorRegistry.address}}"
      abi: CreatorRegistry
      startBlock: {{creatorRegistry.startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - Creator
        - AuditLog
      abis:
        - name: CreatorRegistry
          file: ./abis/CreatorRegistry.json
      eventHandlers:
        - event: CreatorRegistered(indexed address,string,uint256)
          handler: handleCreatorRegistered
        - event: CreatorVerified(indexed address,uint256)
          handler: handleCreatorVerified
        - event: CreatorUpdated(indexed address,string)
          handler: handleCreatorUpdated
      file: ./src/creator-registry.ts

  # Content Registry Contract
  - kind: ethereum
    name: ContentRegistry
    network: {{network}}
    source:
      address: "{{contentRegistry.address}}"
      abi: ContentRegistry
      startBlock: {{contentRegistry.startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - Content
        - ConsentRecord
        - AuditLog
      abis:
        - name: ContentRegistry
          file: ./abis/ContentRegistry.json
      eventHandlers:
        - event: ContentRegistered(indexed uint256,indexed address,string,bytes32)
          handler: handleContentRegistered
        - event: ContentUpdated(indexed uint256,string)
          handler: handleContentUpdated
        - event: ContentModerated(indexed uint256,uint8,string)
          handler: handleContentModerated
        - event: ConsentRecorded(indexed bytes32,address[],bytes32[])
          handler: handleConsentRecorded
      file: ./src/content-registry.ts

  # NFT Access Contract (Entitlements)
  - kind: ethereum
    name: NFTAccess
    network: {{network}}
    source:
      address: "{{nftAccess.address}}"
      abi: NFTAccess
      startBlock: {{nftAccess.startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - Entitlement
        - Purchase
        - AuditLog
      abis:
        - name: NFTAccess
          file: ./abis/NFTAccess.json
      eventHandlers:
        - event: EntitlementCreated(indexed uint256,indexed uint256,uint8,uint256,uint256)
          handler: handleEntitlementCreated
        - event: EntitlementPurchased(indexed address,indexed uint256,uint256,string)
          handler: handleEntitlementPurchased
        - event: TransferSingle(indexed address,indexed address,indexed address,uint256,uint256)
          handler: handleTransferSingle
      file: ./src/nft-access.ts

  # Revenue Splitter Contract
  - kind: ethereum
    name: RevenueSplitter
    network: {{network}}
    source:
      address: "{{revenueSplitter.address}}"
      abi: RevenueSplitter
      startBlock: {{revenueSplitter.startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - RevenueSplit
        - Payout
        - AuditLog
      abis:
        - name: RevenueSplitter
          file: ./abis/RevenueSplitter.json
      eventHandlers:
        - event: SplitCreated(indexed uint256,address[],uint256[])
          handler: handleSplitCreated
        - event: RevenueDistributed(indexed uint256,address,uint256)
          handler: handleRevenueDistributed
        - event: PayoutRequested(indexed address,uint256,string)
          handler: handlePayoutRequested
      file: ./src/revenue-splitter.ts

  # Organization Registry Contract
  - kind: ethereum
    name: OrganizationRegistry
    network: {{network}}
    source:
      address: "{{organizationRegistry.address}}"
      abi: OrganizationRegistry
      startBlock: {{organizationRegistry.startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - Organization
        - Creator
        - AuditLog
      abis:
        - name: OrganizationRegistry
          file: ./abis/OrganizationRegistry.json
      eventHandlers:
        - event: OrganizationCreated(indexed address,string,address)
          handler: handleOrganizationCreated
        - event: MemberAdded(indexed address,address,uint8)
          handler: handleMemberAdded
        - event: MemberRemoved(indexed address,address)
          handler: handleMemberRemoved
      file: ./src/organization-registry.ts

  # Age Verification SBT Contract
  - kind: ethereum
    name: AgeVerifiedSBT
    network: {{network}}
    source:
      address: "{{ageVerifiedSBT.address}}"
      abi: AgeVerifiedSBT
      startBlock: {{ageVerifiedSBT.startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - AgeVerification
        - AuditLog
      abis:
        - name: AgeVerifiedSBT
          file: ./abis/AgeVerifiedSBT.json
      eventHandlers:
        - event: Transfer(indexed address,indexed address,indexed uint256)
          handler: handleAgeVerificationMinted
      file: ./src/age-verification.ts

templates:
  # Template for dynamically created revenue splitters
  - kind: ethereum/contract
    name: RevenueSplitterTemplate
    network: {{network}}
    source:
      abi: RevenueSplitter
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - RevenueSplit
        - Payout
      abis:
        - name: RevenueSplitter
          file: ./abis/RevenueSplitter.json
      eventHandlers:
        - event: RevenueDistributed(indexed uint256,address,uint256)
          handler: handleRevenueDistributed
        - event: PayoutRequested(indexed address,uint256,string)
          handler: handlePayoutRequested
      file: ./src/revenue-splitter.ts